#!/usr/bin/env zsh
# 优化版 zshrc 配置 - 自动安装依赖并显示进度条
# 作者: Claude
# 版本: 3.0

# 基础配置
typeset -U PATH
# 添加常用路径，包括 Homebrew 可能的位置
export PATH="/usr/bin:/bin:/usr/sbin:/sbin:$HOME/bin:/usr/local/bin:/opt/homebrew/bin:/usr/local/bin"

# 启用 zsh 模块
zmodload zsh/mapfile
zmodload zsh/datetime

# 缓存目录 - 用于存储安装状态和配置
ZSH_CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/zsh"
[[ ! -d "$ZSH_CACHE_DIR" ]] && mkdir -p "$ZSH_CACHE_DIR"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
GRAY='\033[0;90m'
NC='\033[0m' # No Color

# 工具函数: 显示彩色进度条
show_progress() {
  local width=40
  local percent=$1
  local filled=$((width * percent / 100))
  local empty=$((width - filled))
  local message=${2:-""}
  
  # 使用 ANSI 颜色代码使进度条更美观
  printf "\r${BLUE}[${NC}"
  printf "${GREEN}%${filled}s${NC}" | tr ' ' '#'
  printf "${GRAY}%${empty}s${NC}" | tr ' ' '·'
  printf "${BLUE}]${NC} ${YELLOW}%3d%%${NC} %s" $percent "$message"
}

# 工具函数: 显示安装进度
show_install_progress() {
  local tool_name=$1
  local log_file="$ZSH_CACHE_DIR/${tool_name}_install.log"
  local temp_file="$ZSH_CACHE_DIR/${tool_name}_temp.log"
  local status_file="$ZSH_CACHE_DIR/${tool_name}_status"
  local start_time=$(date +%s)
  local spinner=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
  local i=0
  
  # 创建临时文件用于跟踪进度
  touch "$temp_file"
  
  echo -e "\n${YELLOW}开始安装 $tool_name...${NC}"
  
  while [[ ! -f "$status_file" || "$(cat "$status_file")" == "installing" ]]; do
    # 显示最新的日志内容
    if [[ -f "$log_file" ]]; then
      local new_content=$(tail -n 5 "$log_file" 2>/dev/null | grep -v "^$" | tail -n 1)
      if [[ -n "$new_content" && "$new_content" != "$(tail -n 1 "$temp_file" 2>/dev/null)" ]]; then
        echo "$new_content" >> "$temp_file"
        echo -e "${GRAY}$new_content${NC}"
      fi
    fi
    
    # 显示旋转动画
    local current_time=$(date +%s)
    local elapsed=$((current_time - start_time))
    printf "\r${BLUE}${spinner[$i]}${NC} ${YELLOW}安装中...${NC} ${GRAY}已用时间: ${elapsed}s${NC}  "
    i=$(( (i+1) % ${#spinner[@]} ))
    sleep 0.1
    
    # 检查是否已完成
    if [[ -f "$status_file" && "$(cat "$status_file")" != "installing" ]]; then
      break
    fi
    
    # 检查是否超时（5分钟）
    if [[ $elapsed -gt 300 ]]; then
      echo -e "\n${RED}安装超时，可能需要手动输入密码或处理其他问题${NC}"
      echo -e "${YELLOW}请检查终端是否有需要输入的提示${NC}"
      break
    fi
  done
  
  # 清理临时文件
  rm -f "$temp_file"
  
  # 显示最终状态
  if [[ -f "$status_file" ]]; then
    local final_status=$(cat "$status_file")
    if [[ "$final_status" == "installed" ]]; then
      echo -e "\n${GREEN}✓ $tool_name 安装成功${NC}"
      return 0
    elif [[ "$final_status" == "failed" ]]; then
      echo -e "\n${RED}✗ $tool_name 安装失败${NC}"
      echo -e "${YELLOW}查看详细日志: $log_file${NC}"
      return 1
    fi
  fi
  
  echo -e "\n${YELLOW}? $tool_name 安装状态未知${NC}"
  return 2
}

# 工具函数: 询问用户是否安装
ask_install() {
  local tool_name=$1
  local description=$2
  
  echo -e "${YELLOW}未检测到 $tool_name${NC} - $description"
  echo -ne "${CYAN}是否安装? (y/n) ${NC}"
  read -r response
  
  if [[ "$response" =~ ^[Yy]$ ]]; then
    return 0
  else
    return 1
  fi
}

# 工具函数: 检查工具安装状态
check_tool_status() {
  local tool_name=$1
  local status_file="$ZSH_CACHE_DIR/${tool_name}_status"
  
  if [[ -f "$status_file" ]]; then
    cat "$status_file"
  else
    echo "unknown"
  fi
}

# 工具函数: 后台安装工具
install_tool_bg() {
  local tool_name=$1
  local install_cmd=$2
  local post_install=$3
  local log_file="$ZSH_CACHE_DIR/${tool_name}_install.log"
  local status_file="$ZSH_CACHE_DIR/${tool_name}_status"
  
  # 如果已经在安装中，不要重复启动
  if [[ -f "$status_file" && "$(cat "$status_file")" == "installing" ]]; then
    echo -e "${YELLOW}⚠️ $tool_name 已在安装中，请等待完成${NC}"
    return
  fi
  
  echo "installing" > "$status_file"
  
  # 记录开始时间
  echo "安装开始: $(date)" > "$log_file"
  
  # 在后台执行安装命令
  {
    # 执行安装命令
    eval "$install_cmd" >> "$log_file" 2>&1
    exit_code=$?
    
    if [[ $exit_code -eq 0 ]]; then
      if [[ -n "$post_install" ]]; then
        echo "执行安装后配置..." >> "$log_file"
        eval "$post_install" >> "$log_file" 2>&1
        post_exit_code=$?
        
        if [[ $post_exit_code -ne 0 ]]; then
          echo "⚠️ $tool_name 安装后配置失败" >> "$log_file"
          echo "failed" > "$status_file"
          return
        fi
      fi
      
      echo "✅ $tool_name 安装成功" >> "$log_file"
      echo "installed" > "$status_file"
    else
      echo "❌ $tool_name 安装失败，错误代码: $exit_code" >> "$log_file"
      echo "failed" > "$status_file"
    fi
    
    echo "安装结束: $(date)" >> "$log_file"
  } &
  
  # 显示安装进度
  show_install_progress "$tool_name"
  
  # 返回安装状态
  if [[ -f "$status_file" && "$(cat "$status_file")" == "installed" ]]; then
    return 0
  else
    return 1
  fi
}

# 工具函数: 检查并安装工具 - 交互式
ensure_installed() {
  local tool_name=$1
  local check_cmd=$2
  local install_cmd=$3
  local post_install=$4
  local description=$5
  local auto_install=${6:-false}
  
  # 首先检查命令是否可用
  if eval "$check_cmd" &> /dev/null; then
    echo "installed" > "$ZSH_CACHE_DIR/${tool_name}_status"
    echo -e "${GREEN}✓ $tool_name 已安装${NC}"
    return 0  # 已安装
  fi
  
  # 检查安装状态
  local install_status=$(check_tool_status "$tool_name")
  
  case "$install_status" in
    "installed")
      # 状态文件说已安装，但命令不可用，可能是状态文件过时
      if ! eval "$check_cmd" &> /dev/null; then
        echo "unknown" > "$ZSH_CACHE_DIR/${tool_name}_status"
        echo -e "${YELLOW}⚠️ $tool_name 状态文件过时${NC}"
      else
        echo -e "${GREEN}✓ $tool_name 已安装${NC}"
        return 0
      fi
      ;;
    "installing")
      # 正在安装中
      echo -e "${BLUE}🔄 $tool_name 正在安装中...${NC}"
      show_install_progress "$tool_name"
      if eval "$check_cmd" &> /dev/null; then
        echo "installed" > "$ZSH_CACHE_DIR/${tool_name}_status"
        echo -e "${GREEN}✓ $tool_name 已安装${NC}"
        return 0
      else
        return 2
      fi
      ;;
    "failed")
      # 之前安装失败
      echo -e "${RED}✗ $tool_name 之前安装失败${NC}"
      ;;
  esac
  
  # 询问用户是否安装
  if [[ "$auto_install" == true ]] || ask_install "$tool_name" "$description"; then
    echo -e "${BLUE}🔄 开始安装 $tool_name...${NC}"
    
    # 检查是否需要 sudo
    if [[ "$install_cmd" == *"sudo"* ]]; then
      echo -e "${YELLOW}⚠️ 此安装可能需要输入密码${NC}"
    fi
    
    install_tool_bg "$tool_name" "$install_cmd" "$post_install"
    
    # 检查安装结果
    if eval "$check_cmd" &> /dev/null; then
      echo "installed" > "$ZSH_CACHE_DIR/${tool_name}_status"
      echo -e "${GREEN}✓ $tool_name 安装成功${NC}"
      return 0
    else
      echo -e "${RED}✗ $tool_name 安装失败${NC}"
      return 1
    fi
  else
    echo -e "${YELLOW}⚠️ 跳过安装 $tool_name${NC}"
    return 1
  fi
}

# 初始化工具列表 - 使用关联数组
typeset -A tools_to_install
tools_to_install=(
  ["homebrew"]="macOS 包管理器，用于安装其他工具"
  ["fnm"]="Node.js 版本管理器，用于管理不同版本的 Node.js"
  ["oh-my-zsh"]="ZSH 配置管理框架，提供插件和主题支持"
  ["zsh-syntax-highlighting"]="ZSH 语法高亮插件"
  ["zsh-autosuggestions"]="ZSH 命令自动建议插件"
  ["z"]="目录快速跳转工具"
)

# 检查必要工具 - 交互式
check_required_tools() {
  echo -e "${BLUE}=== 检查必要工具 ===${NC}"
  
  # 检查 Homebrew - 检查命令和安装目录
  if command -v brew &> /dev/null || [[ -d "/opt/homebrew" ]] || [[ -d "/usr/local/Homebrew" ]]; then
    # Homebrew 已安装，确保状态文件正确
    echo "installed" > "$ZSH_CACHE_DIR/homebrew_status"
    echo -e "${GREEN}✓ Homebrew 已安装${NC}"
  else
    local brew_status=$(check_tool_status "homebrew")
    if [[ "$brew_status" == "installing" ]]; then
      echo -e "${BLUE}🔄 Homebrew 正在安装中...${NC}"
      show_install_progress "homebrew"
    elif [[ "$brew_status" != "installed" ]]; then
      if ask_install "Homebrew" "macOS 包管理器，用于安装其他工具"; then
        echo -e "${YELLOW}⚠️ Homebrew 安装可能需要输入密码${NC}"
        install_tool_bg "homebrew" '/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"' 'if [[ -f /opt/homebrew/bin/brew ]]; then eval "$(/opt/homebrew/bin/brew shellenv)"; elif [[ -f /usr/local/bin/brew ]]; then eval "$(/usr/local/bin/brew shellenv)"; fi'
      fi
    fi
  fi
  
  # 确保 Homebrew 环境变量设置正确
  if [[ -f /opt/homebrew/bin/brew ]]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
    echo -e "${GREEN}✓ 使用 Apple Silicon Homebrew (/opt/homebrew)${NC}"
  elif [[ -f /usr/local/bin/brew ]]; then
    eval "$(/usr/local/bin/brew shellenv)"
    echo -e "${GREEN}✓ 使用 Intel Homebrew (/usr/local)${NC}"
  fi
  
  # 检查 oh-my-zsh
  if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
    ensure_installed "oh-my-zsh" "test -d $HOME/.oh-my-zsh" 'sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended' "setup_omz" "ZSH 配置管理框架，提供插件和主题支持"
  else
    echo "installed" > "$ZSH_CACHE_DIR/oh-my-zsh_status"
    echo -e "${GREEN}✓ oh-my-zsh 已安装${NC}"
  fi

  # 检查 zsh-syntax-highlighting 插件
  if [[ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting" ]]; then
    ensure_installed "zsh-syntax-highlighting" "test -d ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting" "git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting" "" "ZSH 语法高亮插件"
  else
    echo "installed" > "$ZSH_CACHE_DIR/zsh-syntax-highlighting_status"
    echo -e "${GREEN}✓ zsh-syntax-highlighting 已安装${NC}"
  fi

  # 检查 zsh-autosuggestions 插件
  if [[ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions" ]]; then
    ensure_installed "zsh-autosuggestions" "test -d ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions" "git clone https://github.com/zsh-users/zsh-autosuggestions.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions" "" "ZSH 命令自动建议插件"
  else
    echo "installed" > "$ZSH_CACHE_DIR/zsh-autosuggestions_status"
    echo -e "${GREEN}✓ zsh-autosuggestions 已安装${NC}"
  fi

  # 检查 z 插件
  if command -v brew &> /dev/null; then
    ensure_installed "z" "brew list z &>/dev/null" "brew install z" "" "目录快速跳转工具"
  else
    # 如果没有brew，可以直接下载z到custom目录
    if [[ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/z" ]]; then
      ensure_installed "z" "test -d ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/z" "mkdir -p ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/z && curl -fsSL https://raw.githubusercontent.com/rupa/z/master/z.sh -o ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/z/z.sh" "" "目录快速跳转工具"
    else
      echo "installed" > "$ZSH_CACHE_DIR/z_status"
      echo -e "${GREEN}✓ z 已安装${NC}"
    fi
  fi
  
  # 检查 fnm - 更全面的检测
  if command -v fnm &>/dev/null || [[ -x "/opt/homebrew/bin/fnm" ]] || [[ -x "/usr/local/bin/fnm" ]] || [[ -x "$HOME/.fnm/fnm" ]]; then
    echo "installed" > "$ZSH_CACHE_DIR/fnm_status"
    echo -e "${GREEN}✓ fnm 已安装${NC}"
    # 确保 fnm 环境变量设置正确
    setup_fnm
  else
    ensure_installed "fnm" "command -v fnm" "brew install fnm" "setup_fnm" "Node.js 版本管理器，用于管理不同版本的 Node.js"
  fi
  
  echo -e "${BLUE}=== 检查完成 ===${NC}\n"
}

# fnm 设置函数 - 用于安装后配置
setup_fnm() {
  # 添加 fnm 到 PATH - 确保使用正确的路径
  local fnm_paths=(
    "$HOME/.fnm"
    "/opt/homebrew/bin"
    "/usr/local/bin"
  )
  
  for fnm_path in "${fnm_paths[@]}"; do
    if [[ -d "$fnm_path" && -x "$fnm_path/fnm" ]]; then
      export PATH="$fnm_path:$PATH"
      break
    fi
  done
  
  # 如果之前有 nvm，自动导入已有的 node 版本
  if [[ -d "$HOME/.nvm" ]]; then
    echo -e "${BLUE}检测到 nvm，正在导入现有 Node.js 版本...${NC}"
    for version in $(ls -1 $HOME/.nvm/versions/node 2>/dev/null); do
      command fnm import --node-dir "$HOME/.nvm/versions/node/$version" &>/dev/null
    done
  fi
  
  # 设置 fnm 环境变量 - 使用 command 前缀避免递归
  if command -v fnm &>/dev/null; then
    eval "$(command fnm env --use-on-cd)" 2>/dev/null || true
  fi
  
  echo -e "${GREEN}✓ fnm 环境已配置${NC}"
  return 0
}

# fnm 加载函数 - 用于按需加载
load_fnm() {
  # 静默模式标志 - 避免重复输出
  local silent=${1:-false}
  
  # 如果 fnm 已经在 PATH 中，直接返回
  if command -v fnm &>/dev/null; then
    # 确保 fnm 环境变量已设置
    eval "$(command fnm env --use-on-cd)" 2>/dev/null || true
    [[ "$silent" == "false" ]] && echo -e "${GREEN}✓ fnm 环境已加载${NC}"
    return 0
  fi
  
  # 检查 fnm 安装位置并添加到 PATH
  local fnm_paths=(
    "$HOME/.fnm"
    "/opt/homebrew/bin"
    "/usr/local/bin"
  )
  
  local fnm_found=false
  for fnm_path in "${fnm_paths[@]}"; do
    if [[ -x "$fnm_path/fnm" ]]; then
      export PATH="$fnm_path:$PATH"
      fnm_found=true
      break
    fi
  done
  
  if [[ "$fnm_found" == true ]]; then
    # 设置 fnm 环境变量 - 使用 command 前缀避免递归
    eval "$(command fnm env --use-on-cd)" 2>/dev/null || true
    [[ "$silent" == "false" ]] && echo -e "${GREEN}✓ fnm 环境已加载${NC}"
    return 0
  fi
  
  # 如果 fnm 未安装且不是静默模式，尝试安装
  if [[ "$silent" == "false" ]]; then
    echo -e "${YELLOW}⚠️ fnm 未安装，正在尝试安装...${NC}"
    ensure_installed "fnm" "command -v fnm" "brew install fnm" "setup_fnm" "Node.js 版本管理器" true
    
    # 再次检查 fnm 是否可用
    if command -v fnm &>/dev/null; then
      eval "$(command fnm env --use-on-cd)" 2>/dev/null || true
      echo -e "${GREEN}✓ fnm 已安装并加载${NC}"
      return 0
    else
      echo -e "${RED}✗ 无法加载 fnm${NC}"
      return 1
    fi
  fi
  
  return 1
}

# oh-my-zsh 设置函数
setup_omz() {
  # 配置 oh-my-zsh
  export ZSH="$HOME/.oh-my-zsh"
  
  # 设置主题 - 使用默认的robbyrussell，可以根据需要更换
  ZSH_THEME="robbyrussell"
  
  # 禁用自动更新提示
  DISABLE_AUTO_UPDATE="true"
  
  # 配置插件
  plugins=(
    git
    z
    zsh-syntax-highlighting
    zsh-autosuggestions
  )
  
  # 加载 oh-my-zsh
  if [[ -f "$ZSH/oh-my-zsh.sh" ]]; then
    source "$ZSH/oh-my-zsh.sh"
    return 0
  fi
  
  return 1
}

# Node.js 安装函数
install_node() {
  local version=${1:-"lts"}
  
  # 确保 fnm 已加载 - 使用静默模式
  load_fnm true || return 1
  
  echo -e "${BLUE}🔄 正在安装 Node.js $version...${NC}"
  
  # 安装指定版本 - 使用 command 前缀避免递归
  if [[ "$version" == "lts" ]]; then
    command fnm install --lts
    command fnm default $(command fnm list | grep lts | head -n1 | awk '{print $2}')
  else
    command fnm install $version
    command fnm default $version
  fi
  
  # 检查安装结果
  if command -v node &>/dev/null; then
    echo -e "${GREEN}✓ Node.js $(node -v) 安装成功${NC}"
    return 0
  else
    echo -e "${RED}✗ Node.js 安装失败${NC}"
    return 1
  fi
}

# 命令包装函数 - 改进版本避免递归调用
wrap_command() {
  local cmd=$1
  local load_func=$2
  
  eval "function $cmd() {
    $load_func true  # 静默模式加载
    command $cmd \"\$@\"
  }"
}

# 创建命令别名来触发环境加载 - 不包装 fnm 本身
wrap_command "node" "load_fnm"
wrap_command "npm" "load_fnm"
wrap_command "npx" "load_fnm"
wrap_command "yarn" "load_fnm"
wrap_command "pnpm" "load_fnm"

# 确保 fnm 命令可用 - 在 shell 启动时预加载
if ! command -v fnm &>/dev/null; then
  # 尝试添加 fnm 到 PATH
  for fnm_path in "$HOME/.fnm" "/opt/homebrew/bin" "/usr/local/bin"; do
    if [[ -x "$fnm_path/fnm" ]]; then
      export PATH="$fnm_path:$PATH"
      break
    fi
  done
fi

# 初始化配置
init_config() {
  echo -e "${BLUE}=== 初始化 zsh 配置 ===${NC}"
  
  # 设置临时提示符
  PS1='%F{cyan}%~%f %F{green}❯%f '
  
  # 检查并启动必要工具的安装
  check_required_tools
  
  # 配置 oh-my-zsh
  if [[ -d "$HOME/.oh-my-zsh" ]]; then
    setup_omz
  fi
  
  # 确保 fnm 环境变量设置正确
  if command -v fnm &>/dev/null; then
    eval "$(command fnm env --use-on-cd)" 2>/dev/null || true
  fi
  
  echo -e "${GREEN}✓ zsh 配置初始化完成${NC}"
}

# 启动初始化
init_config

# 加载用户别名配置
alias sho='ssh -o ServerAliveInterval=60 '
alias shozc='sho -p 7004 zczx@60.205.149.76'
alias vim='nvim'
alias tmux='TERM=screen-256color tmux -2'
alias proxy='export all_proxy=http://127.0.0.1:1081'
alias unproxy='unset all_proxy'
alias mvnd='mvn clean deploy -Dmaven.test.skip=true -Dmaven.compile.fork=true -T 1C'
alias mvnp='mvn clean package  -Dmaven.test.skip=true -Dmaven.compile.fork=true -T 1C'

# Maven配置
export MAVEN_HOME=/Users/ab/soft/mvn
export PATH="$PATH:$MAVEN_HOME/bin"
