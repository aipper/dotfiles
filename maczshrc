#!/usr/bin/env zsh

# ===== 简洁优雅的 macOS zshrc 配置 =====
# 专注解决 Maven、Android 工具路径问题
# 版本: 8.0 - 简化版

# ===== 核心环境变量配置 =====
# Homebrew 路径检测（支持 Apple Silicon 和 Intel Mac）
if [[ -d "/opt/homebrew" ]]; then
    export HOMEBREW_PREFIX="/opt/homebrew"
elif [[ -d "/usr/local/Homebrew" ]]; then
    export HOMEBREW_PREFIX="/usr/local"
fi

# 开发工具路径配置
export JAVA_HOME="/Library/Java/JavaVirtualMachines/$(ls /Library/Java/JavaVirtualMachines | head -1)/Contents/Home"
export MAVEN_HOME="$HOMEBREW_PREFIX/share/maven"
export ANDROID_HOME="$HOME/Library/Android/sdk"
export PNPM_HOME="$HOME/Library/pnpm"

# 如果 Homebrew Maven 不存在，尝试其他位置
if [[ ! -d "$MAVEN_HOME" ]]; then
    local maven_candidates=(
        "$HOME/soft/mvn"
        "$HOME/.m2/wrapper/dists/apache-maven-*"
        "/opt/maven"
    )
    
    for candidate in $maven_candidates; do
        if [[ -d $candidate && -f $candidate/bin/mvn ]]; then
            export MAVEN_HOME="$candidate"
            break
        fi
    done
fi

# ===== PATH 构建 - 确保工具可用性 =====
# 清理并重建 PATH（避免重复）
typeset -U path  # 自动去重

# 基础系统路径
path=(
    # Homebrew 优先（包含通过 brew 安装的工具）
    "$HOMEBREW_PREFIX/bin"
    "$HOMEBREW_PREFIX/sbin"
    
    # 开发工具路径（关键）
    "$MAVEN_HOME/bin"                    # Maven
    "$ANDROID_HOME/platform-tools"      # Android SDK (adb, fastboot)
    "$ANDROID_HOME/tools"               # Android tools
    "$ANDROID_HOME/tools/bin"           # Android tools bin
    "$PNPM_HOME"                        # pnpm
    "$HOME/.cargo/bin"                  # Rust
    "$HOME/.fnm"                        # fnm
    
    # 用户自定义路径
    "$HOME/bin"
    "$HOME/.local/bin"
    
    # 系统默认路径
    "/usr/local/bin"
    "/usr/bin"
    "/bin"
    "/usr/sbin"
    "/sbin"
)

# 过滤不存在的路径，保持 PATH 清洁
typeset -a valid_paths
for dir in $path; do
    [[ -d "$dir" ]] && valid_paths+="$dir"
done
path=($valid_paths)

export PATH

# ===== 历史记录配置 =====
export HISTFILE="$HOME/.zsh_history"
export HISTSIZE=50000
export SAVEHIST=50000

# 确保历史文件存在且可写
[[ ! -f "$HISTFILE" ]] && touch "$HISTFILE"

# 历史记录选项
setopt EXTENDED_HISTORY          # 记录时间戳
setopt SHARE_HISTORY            # 多会话共享历史
setopt HIST_IGNORE_DUPS         # 忽略重复命令
setopt HIST_IGNORE_ALL_DUPS     # 删除旧的重复命令
setopt HIST_IGNORE_SPACE        # 忽略空格开头的命令
setopt HIST_REDUCE_BLANKS       # 删除多余空格
setopt INC_APPEND_HISTORY       # 立即追加历史

# 其他 shell 选项
setopt AUTO_CD                  # 自动 cd
setopt CORRECT                  # 命令纠错
setopt MENU_COMPLETE           # 菜单补全

# ===== Node.js 环境管理 (fnm) =====
# 初始化 fnm（如果已安装）
if command -v fnm >/dev/null 2>&1; then
    eval "$(fnm env --use-on-cd --shell zsh)"
    
    # 自动使用项目 Node 版本
    autoload -U add-zsh-hook
    _fnm_autoload_hook() {
        if [[ -f .nvmrc || -f .node-version ]]; then
            fnm use --silent-if-unchanged 2>/dev/null
        fi
    }
    add-zsh-hook chpwd _fnm_autoload_hook
    _fnm_autoload_hook  # 启动时检查
fi

# ===== Homebrew 环境初始化 =====
if [[ -n "$HOMEBREW_PREFIX" && -f "$HOMEBREW_PREFIX/bin/brew" ]]; then
    eval "$($HOMEBREW_PREFIX/bin/brew shellenv)"
fi

# ===== Rust 环境 =====
[[ -f "$HOME/.cargo/env" ]] && source "$HOME/.cargo/env"

# ===== 补全系统 =====
autoload -Uz compinit
compinit

# 补全样式配置
zstyle ':completion:*' menu select                                    # 菜单选择
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'           # 大小写不敏感
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}               # 颜色支持
zstyle ':completion:*:descriptions' format '%F{yellow}-- %d --%f'    # 描述格式

# ===== 自动建议和语法高亮 =====
# zsh-autosuggestions
if [[ ! -d "$HOME/.zsh/zsh-autosuggestions" ]]; then
    echo "正在安装 zsh-autosuggestions..."
    git clone --quiet https://github.com/zsh-users/zsh-autosuggestions "$HOME/.zsh/zsh-autosuggestions" 2>/dev/null
fi

if [[ -f "$HOME/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh" ]]; then
    source "$HOME/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh"
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#666666"
    ZSH_AUTOSUGGEST_STRATEGY=(history completion)
fi

# zsh-syntax-highlighting
if [[ ! -d "$HOME/.zsh/zsh-syntax-highlighting" ]]; then
    echo "正在安装 zsh-syntax-highlighting..."
    git clone --quiet https://github.com/zsh-users/zsh-syntax-highlighting "$HOME/.zsh/zsh-syntax-highlighting" 2>/dev/null
fi

if [[ -f "$HOME/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]]; then
    source "$HOME/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
fi

# ===== 键盘绑定 =====
# Emacs 风格快捷键
bindkey '^A' beginning-of-line      # Ctrl+A 行首
bindkey '^E' end-of-line           # Ctrl+E 行尾
bindkey '^K' kill-line             # Ctrl+K 删除到行尾
bindkey '^U' kill-whole-line       # Ctrl+U 删除整行
bindkey '^W' backward-kill-word    # Ctrl+W 删除单词
bindkey '^R' history-incremental-search-backward  # Ctrl+R 搜索历史

# 自动建议快捷键
if (( $+functions[_zsh_autosuggest_accept] )); then
    bindkey '^F' autosuggest-accept              # Ctrl+F 接受建议
    bindkey '^ ' autosuggest-accept              # Ctrl+Space 接受建议
fi

# 方向键历史搜索
bindkey '^[[A' up-line-or-history
bindkey '^[[B' down-line-or-history

# ===== 提示符 =====
# 简洁的提示符，显示当前目录和 git 分支
autoload -Uz vcs_info
precmd() { vcs_info }
zstyle ':vcs_info:git:*' formats '%F{blue}(%b)%f'
setopt PROMPT_SUBST
PROMPT='%F{green}%2~%f ${vcs_info_msg_0_}%F{cyan}❯%f '

# ===== 实用别名 =====
# 系统工具
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias ..='cd ..'
alias ...='cd ../..'

# 网络工具
alias ping='ping -c 4'
alias myip='curl -s https://httpbin.org/ip | jq -r .origin'

# Git
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git pull'
alias gd='git diff'

# Maven（确保可用性）
alias mvn-clean='mvn clean'
alias mvn-compile='mvn compile'
alias mvn-test='mvn test'
alias mvn-package='mvn clean package -DskipTests'
alias mvn-install='mvn clean install -DskipTests'
alias mvn-deploy='mvn clean deploy -DskipTests'

# Android
alias adb-devices='adb devices'
alias adb-logcat='adb logcat'
alias adb-install='adb install -r'

# 开发工具
alias vim='nvim'
alias code='code .'

# ===== 实用函数 =====
# 检查环境状态
check-env() {
    echo "🔍 开发环境状态检查"
    echo "═══════════════════════════"
    
    # Java
    if command -v java >/dev/null 2>&1; then
        echo "☕ Java: ✅ $(java -version 2>&1 | head -1)"
        echo "   JAVA_HOME: $JAVA_HOME"
    else
        echo "☕ Java: ❌ 未安装"
    fi
    
    # Maven
    if command -v mvn >/dev/null 2>&1; then
        echo "📦 Maven: ✅ $(mvn --version | head -1)"
        echo "   位置: $(which mvn)"
        echo "   MAVEN_HOME: $MAVEN_HOME"
    else
        echo "📦 Maven: ❌ 不可用"
        echo "   修复命令: brew install maven"
    fi
    
    # Android SDK
    if command -v adb >/dev/null 2>&1; then
        echo "🤖 Android SDK: ✅ adb $(adb version | head -1)"
        echo "   位置: $(which adb)"
        echo "   ANDROID_HOME: $ANDROID_HOME"
    else
        echo "🤖 Android SDK: ❌ adb 不可用"
        echo "   请检查 Android Studio 安装"
    fi
    
    # Node.js
    if command -v node >/dev/null 2>&1; then
        echo "🟢 Node.js: ✅ $(node --version)"
        if command -v fnm >/dev/null 2>&1; then
            echo "   管理工具: fnm $(fnm --version)"
        fi
    else
        echo "🟢 Node.js: ❌ 未安装"
        echo "   安装命令: fnm install --lts"
    fi
    
    # 其他工具
    echo ""
    echo "🛠️  其他工具:"
    command -v git >/dev/null 2>&1 && echo "   Git: ✅ $(git --version)"
    command -v brew >/dev/null 2>&1 && echo "   Homebrew: ✅ $(brew --version | head -1)"
    command -v cargo >/dev/null 2>&1 && echo "   Rust: ✅ $(rustc --version)"
    command -v pnpm >/dev/null 2>&1 && echo "   pnpm: ✅ $(pnpm --version)"
    
    echo "═══════════════════════════"
}

# 修复环境变量
fix-env() {
    echo "🔧 重新加载环境配置..."
    source ~/.zshrc
    echo "✅ 配置已重新加载"
    echo "💡 运行 'check-env' 验证环境状态"
}

# 快速安装开发工具
install-dev-tools() {
    echo "🚀 安装常用开发工具..."
    
    if ! command -v brew >/dev/null 2>&1; then
        echo "先安装 Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    
    echo "安装开发工具..."
    brew install git maven node fnm
    
    echo "安装 Node.js LTS..."
    fnm install --lts
    fnm default lts
    
    echo "✅ 开发工具安装完成！"
    echo "🔄 请重新加载配置: source ~/.zshrc"
}

# ===== 启动优化 =====
# 延迟加载 Oh My Zsh（可选）
if [[ -d "$HOME/.oh-my-zsh" ]] && [[ "$LOAD_OMZ" == "true" ]]; then
    export ZSH="$HOME/.oh-my-zsh"
    ZSH_THEME="robbyrussell"
    plugins=(git z)
    source "$ZSH/oh-my-zsh.sh"
fi

# ===== 首次运行提示 =====
if [[ $- == *i* ]] && [[ ! -f "$HOME/.zshrc_initialized" ]]; then
    echo "🎉 zsh 配置已加载！"
    echo ""
    echo "💡 实用命令："
    echo "   check-env     - 检查开发环境状态"
    echo "   fix-env       - 重新加载配置"
    echo "   install-dev-tools - 安装开发工具"
    echo ""
    echo "⚡ 如果 Maven 或 adb 命令不可用，请运行 'check-env' 检查"
    echo ""
    
    touch "$HOME/.zshrc_initialized"
fi
