#!/usr/bin/env zsh

# 极速版 zshrc 配置
# 作者: Claude
# 版本: 6.2
# 修复历史命令提示功能和路径加载顺序

# ===== 历史记录配置 =====
export HISTFILE=~/.zsh_history
export HISTSIZE=50000
export SAVEHIST=50000
setopt EXTENDED_HISTORY          # 记录时间戳
setopt SHARE_HISTORY            # 实时共享历史
setopt HIST_VERIFY              # 历史扩展时进行确认
setopt HIST_EXPIRE_DUPS_FIRST   # 删除重复条目时，先删除旧的
setopt HIST_IGNORE_DUPS         # 忽略连续重复命令
setopt HIST_IGNORE_ALL_DUPS     # 忽略所有重复命令
setopt HIST_FIND_NO_DUPS        # 查找时忽略重复
setopt HIST_IGNORE_SPACE        # 忽略以空格开头的命令
setopt HIST_SAVE_NO_DUPS        # 保存时忽略重复
setopt HIST_REDUCE_BLANKS       # 删除多余空白
setopt INC_APPEND_HISTORY       # 立即追加历史

# ===== 环境变量配置 - 先定义变量再使用 =====
export ANDROID_HOME=$HOME/Library/Android/sdk
export PNPM_HOME="/Users/ab/Library/pnpm"
export MAVEN_HOME=/Users/ab/soft/mvn

# 基础路径配置 - 静态设置，避免动态检查
export PATH="/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$HOME/bin:$MAVEN_HOME/bin:$PNPM_HOME:$HOME/.fnm"

# Rust 路径配置
if [[ -d "$HOME/.cargo/bin" ]]; then
    export PATH="$HOME/.cargo/bin:$PATH"
fi

# 快速显示帮助信息
printf '\033[0;34m=== 开发工具安装命令 ===\033[0m
\033[0;36mHomebrew:\033[0m /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
\033[0;36mOh-my-zsh:\033[0m sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/master/tools/install.sh)"
\033[0;36mfnm:\033[0m brew install fnm
\033[0;36mNode.js:\033[0m fnm install --lts && fnm default lts
\033[0;36mRust:\033[0m curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh
\033[0;36mPlugins:\033[0m git clone https://github.com/zsh-users/zsh-{syntax-highlighting,autosuggestions}.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/
\033[0;36mz:\033[0m brew install z
\033[0;33m=== 安装后重启终端 ===\033[0m\n'

# 简单提示符
PS1='%F{cyan}%~%f %F{green}❯%f '

# 用户别名 - 直接定义
alias sho='ssh -o ServerAliveInterval=60 '
alias shozc='sho -p 7004 zczx@60.205.149.76'
alias vim='nvim'
alias tmux='TERM=screen-256color tmux -2'
alias proxy='export all_proxy=http://127.0.0.1:7897'
alias unproxy='unset all_proxy'
alias mvnd='mvn clean deploy -Dmaven.test.skip=true -Dmaven.compile.fork=true -T 1C'
alias mvnp='mvn clean package -Dmaven.test.skip=true -Dmaven.compile.fork=true -T 1C'

# ===== 改进的懒加载函数 =====
lazy_load_brew() {
    unfunction brew 2>/dev/null
    if [[ -f /opt/homebrew/bin/brew ]]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
    elif [[ -f /usr/local/bin/brew ]]; then
        eval "$(/usr/local/bin/brew shellenv)"
    fi
    brew "$@"
}

lazy_load_omz() {
    if [[ -d "$HOME/.oh-my-zsh" ]]; then
        export ZSH="$HOME/.oh-my-zsh"
        ZSH_THEME="robbyrussell"
        DISABLE_AUTO_UPDATE="true"
        plugins=(git z zsh-syntax-highlighting zsh-autosuggestions)
        source "$ZSH/oh-my-zsh.sh"

        # 确保 autosuggestions 插件正确加载
        if [[ -f "$ZSH/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" ]]; then
            source "$ZSH/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
        fi
    fi
}

# fnm 懒加载函数 - 修复 node 环境问题
lazy_load_fnm() {
    local cmd_name="$1"
    shift
    
    # 取消函数定义，避免递归调用
    unfunction fnm node npm npx yarn pnpm 2>/dev/null
    
    # 初始化 fnm 环境
    if command -v fnm &>/dev/null; then
        eval "$(fnm env --use-on-cd)"
        # 确保当前目录的 node 版本被激活
        if [[ -f .nvmrc || -f .node-version ]]; then
            fnm use &>/dev/null
        fi
    fi
    
    # 执行原始命令
    if command -v "$cmd_name" &>/dev/null; then
        "$cmd_name" "$@"
    else
        echo "命令 $cmd_name 未找到，请确保已正确安装 Node.js"
        return 1
    fi
}

# Rust 懒加载函数 - 优化版本
lazy_load_rust() {
    local cmd_name="$1"
    shift
    
    # 取消函数定义，避免递归调用
    unfunction rustc cargo rustup rust-analyzer 2>/dev/null

    # 检查并设置 Rust 环境变量
    if [[ -d "$HOME/.cargo" ]]; then
        export CARGO_HOME="$HOME/.cargo"
        export RUSTUP_HOME="$HOME/.rustup"

        # 确保路径正确添加
        if [[ -d "$HOME/.cargo/bin" ]] && [[ ":$PATH:" != *":$HOME/.cargo/bin:"* ]]; then
            export PATH="$HOME/.cargo/bin:$PATH"
        fi

        # 如果有 rustup，更新环境
        if command -v rustup &>/dev/null; then
            source "$HOME/.cargo/env" 2>/dev/null
        fi
    fi

    # 执行原始命令
    if command -v "$cmd_name" &>/dev/null; then
        "$cmd_name" "$@"
    else
        echo "命令 $cmd_name 未找到，请确保已正确安装 Rust"
        return 1
    fi
}

# 创建懒加载别名
if ! command -v brew &>/dev/null; then
    function brew() { lazy_load_brew "$@"; }
fi

# Node.js 相关命令懒加载
for cmd in fnm node npm npx yarn pnpm; do
    if ! command -v "$cmd" &>/dev/null; then
        eval "function $cmd() { lazy_load_fnm \"\$cmd\" \"\$@\"; }"
    fi
done

# Rust 相关命令懒加载
for rust_cmd in rustc cargo rustup rust-analyzer; do
    if ! command -v "$rust_cmd" &>/dev/null && [[ -d "$HOME/.cargo/bin" ]]; then
        eval "function $rust_cmd() { lazy_load_rust \"\$rust_cmd\" \"\$@\"; }"
    fi
done

# ===== 优化的 oh-my-zsh 加载 =====
if [[ -d "$HOME/.oh-my-zsh" ]]; then
    # 同步加载以确保插件正常工作
    lazy_load_omz
else
    # 如果没有 oh-my-zsh，手动加载基础插件
    if [[ -f "$HOME/.zsh-autosuggestions/zsh-autosuggestions.zsh" ]]; then
        source "$HOME/.zsh-autosuggestions/zsh-autosuggestions.zsh"
    fi
    if [[ -f "$HOME/.zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]]; then
        source "$HOME/.zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
    fi
fi

# ===== 键盘绑定 =====
# 启用键盘导航
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward

# ===== autosuggestions 配置 =====
if [[ -n "${ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE}" ]]; then
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=8"
    ZSH_AUTOSUGGEST_STRATEGY=(history completion)
fi
